/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== NoSelectable.png ==================
static const unsigned char temp_binary_data_0[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,13,0,0,0,13,8,3,0,0,0,69,53,20,78,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,32,99,72,82,77,0,0,122,38,0,0,128,132,0,0,250,0,0,0,128,232,0,0,117,48,0,0,
234,96,0,0,58,152,0,0,23,112,156,186,81,60,0,0,3,0,80,76,84,69,0,0,0,255,0,0,128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,21,60,115,0,0,1,0,116,82,78,83,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,83,247,7,37,0,0,0,24,116,69,88,116,83,111,102,116,119,97,114,101,0,80,97,105,110,116,46,78,69,84,32,
118,51,46,51,49,55,131,119,134,0,0,0,67,73,68,65,84,24,87,69,206,73,14,0,32,8,3,64,202,255,255,140,93,8,26,47,35,45,177,102,122,238,20,245,105,45,129,200,196,137,36,102,103,221,194,87,19,17,47,160,174,164,7,7,35,14,174,167,109,76,239,78,135,66,38,221,
208,7,128,7,117,130,86,43,147,114,95,99,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* NoSelectable_png = (const char*) temp_binary_data_0;

//================== NoView.png ==================
static const unsigned char temp_binary_data_1[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,13,0,0,0,13,8,3,0,0,0,69,53,20,78,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,32,99,72,82,77,0,0,122,38,0,0,128,132,0,0,250,0,0,0,128,232,0,0,117,48,0,0,
234,96,0,0,58,152,0,0,23,112,156,186,81,60,0,0,3,0,80,76,84,69,0,0,0,255,0,0,128,128,0,128,128,128,192,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,220,203,138,0,0,1,0,116,82,78,83,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,83,247,7,37,0,0,0,24,116,69,88,116,83,111,102,116,119,97,114,101,0,80,97,105,110,116,
46,78,69,84,32,118,51,46,51,49,55,131,119,134,0,0,0,81,73,68,65,84,24,87,85,78,1,14,0,33,8,66,241,255,95,38,240,118,109,233,82,137,12,80,165,63,170,80,23,122,130,92,154,206,92,67,42,98,195,43,80,3,13,146,109,2,194,48,36,103,60,27,141,105,244,135,228,
222,164,79,94,74,89,34,163,155,63,87,113,235,234,173,153,213,123,189,60,62,15,160,210,69,88,38,208,178,54,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* NoView_png = (const char*) temp_binary_data_1;

//================== Options.png ==================
static const unsigned char temp_binary_data_2[] =
"\x89PNG\r\n"
"\x1a\n"
"\0\0\0\rIHDR\0\0\0\x18\0\0\0\x18\x08\x04\0\0\0J~\xf5s\0\0\x02\xf4zTXtRaw profile type exif\0\0x\xda\xed\x97M\x92\xe4(\x0c\x85\xf7\x9c""b\x8e`\xfd!q\x1c\x0c&\xa2o0\xc7\x9f\x87Mz\xaa\xb2\xb2\x17""9\xb3\xea\x88\x84""0`\x90\x9f@\x1f\x90U\xe9\xf8\xfb\xd7H"
"\x7f!Q\x89\x9c\xd4<r\xc9yC\xd2\xa2\x85+\x1a\xb1]\xa9\x9e%mz\x96\xd7\xcb""c\x8c\xbe\xf7\xa7{\x80\xd1%\xa8\xe5z\x8d\xbc\xec\x1f\xfdt\x0b\\UE\xcb\xbe\x08""E[\x03\xfb\xf7\x81\xa2K?\x9e\x84\xf8\xaa""d\xceh\xb6\xfb\x12*KH\xf8\x1a\xa0%P\xaf""em\xb9\x84\x7f]"
"\xc2~\\\xf5\xfa\xfe\n"
"\x03\x9e""4\x0bn\xcbl\x19?\xbf\xab#z\xdd\xe0G\x98\x0f!\xd9P\x8a\xf0""5\x01\x99\x8f$\xa9\x18 \x94\"\xd3p\x93\x82\xf6\x1c\xac\xb3\xbd\xc4\x10\x90Wq\xba\x13\xec\xd2\x98S\xd5\x97""F\xdf\xa8\xdc-z\xdd\x9f\x9ei)/\x13y\n"
"r\xbe\xeb\x97\xfd\x89\xeci@n?\xfc\xd5\xb3\xc6j\xf1\xf7~\x97K*mO\xd1\x9f\xcf\x18=\xc6\xb9""f\xac\xa2jF\xa8\xf3Z\xd4""c)g\x0bv;\\L\xd7\x91\xa0\x97""7\xc7""c\x90\xf0""3\x17\xe4\xc0\xaen\xd8\n"
"}k\xdb\x8e\xdc\xa8\x10\x03\xd7 \xa5N\x95\x06\x1dg\xdd\xa8""a\x8a\xcaGbG\x83\xb9\xb1\x9c\x9d!\xce\x85\x1b\x88\x91\xe8\xcc""4\xd8""A\xb2K\x80""e;\xb1\xab\xf0=\x17:\xdd\x96\xad\xa5\xd3[\xc0s'\x98""2A\x8c\xf0\xc9\xdb""9\xbd\xfb\xc1\x18\xf3(\x10mq\xc7\n"
"\xf3""b\x9e\xc1\xc6""4&\xb9Y\xc2\x0c""Dh\xac\xa0\xda\x19\xe0G~Nt\xee`\x85\x15\xa2<\x8fHA`\xf7Kb7\xfa\xf7&\x90\x13\xb4\xc0\xd0P_g\x90\xbc/\x01\x84\x08\xae\r\x93\xc1\xc9P\x02""5\x12\xa3L\x9b""3;\x11\x02\x19\0T1u\x16\xe5\x1d\x04\xc8\x8c;&\xc9*\x92\xc1&x"
"\xba\xc6'N\xa7)\x1b\xa3;\xa1\x1f\x97\x19H\x98""dq\xb0\xc1Y\x03,U\xc3\xfeq\r\xec\xa1jbjf\xd9\xdc\xc2\x8a\xd5,Y\xb3\xe5\x9c=\xcfK\xb1\xba\xb8&7\xcf\xee\x1e^\xbc\x86\x84\x86""E\x0e\x8f\x88\x12\xb5p\x11\\\x9aVr\xf1\x12\xa5\x94Z\xe1\xb3""B\xb9\xe2\xeb\n"
"\x83Zw\xde""e\xd7\xdd\xd2\x9ew\xdf""c/{m\xd8>M\x9b\xb5\xdc\xbc""E+\xadv\xee\xd2q\x7f\xf4\xdc\xbdG/\xbd\x1et`+\x1dz\xd8\x91\x0f?\xe2(G\x1d\xd8jC\xd2\xd0""a#\x0f\x1f""1\xca\xa8""7\xb5\x85\xf5G~\x83\x1a-j|\x92\x9a\x86~SC\xaf\xfb""C\x82\xe6ub\x93\x19\x80"
"qR\x02q\x9f\x08\xb0\xa1y2\xdb\x82Ty\x92\x9b\xcc\xb6\x82\xebO\x8c""1I\x9b\xcc:Mb \xa8\x07\xb1\rz\xb0K|\x11\x9d\xe4\xfe\x17\xb7\xe4\xfa\x8d\x1b\xffWri\xa2{\x93\xdcOn\xaf\xa8\xf5\xf9""3\xd4Nb\xd7)\x9c""A\xdd\x04\xa7\x0f\xe3GT\x8e:\x7f\xec~\xd4\xe9w\x03\xef"
"\xd6\x1f\xa1\x8f\xd0G\xe8#\xf4\x11\xfa\x08}\x84\xfe \xa1\x81?\x1e\xe6\x7f\x81\xff\0\x94\t\xa7\xec\xfa\xee\xac\x17\0\0\x01$iCCPICC profile\0\0x\x9c\x9d\x90=K\xc3P\x14\x86\x9f\xd4\xaf\xe2\xc7\xa4""8\x14\x91\x0c\xae\x05\x17""3\xb9\xf8\x81\xc1\xa1P\xd3\n"
"V\xa7""4I\xb1\x98\xc4\x90\xa4\x14\xff""A\xff\x89\xfe\x98\x0e\x82\xe0_pWp\xf6\xbd\xd1\xc1\xc1,^8\xbc\x0f\x87s\xde\xf7\xde\x0b\r;\x0e\x92""bq\x1f\x92\xb4\xcc]\xefhp5\xb8\xb6W\xdeXc\x97&K\xb4\xfc\xa0\xc8:\xbd\xb3>\xb5\xe7\xf3\x15\xcb\xe8K\xdbx\xd5\xcf\xfd"
"y\x96\xc3\xa8\x08\xa4sU\x1a""dy\t\xd6\xa1\xd8\x99\x96\x99""a\x15[w}\xef""D<\x13\xdb""a\x92\x86\xe2'\xf1^\x98\x84\x86\xcd\xae\x97\xc4\x93\xe0\xc7\xd3\xdc""f=J/{\xa6\xaf\xda\xc1\xe5\x9c\x0e]l\x86L\x18\x13S\xd2\x96\xa6\xea\x9c\xe2p u\xc9\xf1y\xa0 \x90\xc6"
"D\xeaM5Sr+*\xe4\xe4r,\xea\x8bt\x9b\x9a\xbcV\x95\xd7U\xcaP\x1e""cy\x99\x84{\x12y\x9a<\xcc\xff~\xaf}\\T\x9b\xd6\xf6<\xf3s\xbfj-\xa8\x1a\xa3\x11\xbc?\xc2\xc6\0""6\x9f""a\xf5\xa6&\xab\xf9\xfbm53N5\xf3\xcf""7~\x01\xe6\xb1Pdvh)\xe9\0\0\rviTXtXML:com.adobe."
"xmp\0\0\0\0\0<?xpacket begin=\"\xef\xbb\xbf\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n"
"<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"XMP Core 4.4.0-Exiv2\">\n"
" <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
"  <rdf:Description rdf:about=\"\"\n"
"    xmlns:xmpMM=\"http://ns.adobe.com/xap/1.0/mm/\"\n"
"    xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\"\n"
"    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n"
"    xmlns:GIMP=\"http://www.gimp.org/xmp/\"\n"
"    xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\"\n"
"    xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\"\n"
"   xmpMM:DocumentID=\"gimp:docid:gimp:36ad8a2a-18c0-4b09-9a04-dae674c7971b\"\n"
"   xmpMM:InstanceID=\"xmp.iid:f8165bd6-1c79-4664-b4da-15b8667b7d68\"\n"
"   xmpMM:OriginalDocumentID=\"xmp.did:7c582130-988b-4a71-bcac-a29b28434df1\"\n"
"   dc:Format=\"image/png\"\n"
"   GIMP:API=\"2.0\"\n"
"   GIMP:Platform=\"Windows\"\n"
"   GIMP:TimeStamp=\"1701332417104047\"\n"
"   GIMP:Version=\"2.10.32\"\n"
"   tiff:Orientation=\"1\"\n"
"   xmp:CreatorTool=\"GIMP 2.10\"\n"
"   xmp:MetadataDate=\"2023:11:30T09:20:09+01:00\"\n"
"   xmp:ModifyDate=\"2023:11:30T09:20:09+01:00\">\n"
"   <xmpMM:History>\n"
"    <rdf:Seq>\n"
"     <rdf:li\n"
"      stEvt:action=\"saved\"\n"
"      stEvt:changed=\"/\"\n"
"      stEvt:instanceID=\"xmp.iid:45b38c28-aa3e-4b2e-a5ab-f09c22b74538\"\n"
"      stEvt:softwareAgent=\"Gimp 2.10 (Windows)\"\n"
"      stEvt:when=\"2023-11-30T09:20:17\"/>\n"
"    </rdf:Seq>\n"
"   </xmpMM:History>\n"
"  </rdf:Description>\n"
" </rdf:RDF>\n"
"</x:xmpmeta>\n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                                                                                                    \n"
"                           \n"
"<?xpacket end=\"w\"?>e\xb9hp\0\0\0\x02""bKGD\0\xff\x87\x8f\xcc\xbf\0\0\0\tpHYs\0\0.#\0\0.#\x01x\xa5?v\0\0\0\x07tIME\x07\xe7\x0b\x1e\x08\x14\x11J\x8e""68\0\0\x01(IDAT8\xcb\xdd\xd3=K\\Q\x10\x06\xe0g\xc3\xfa\xc1\"\x12,\xc4\xc2\x10""1\x88\x84""E\x90l\n"
"\x11\xfc\x07\xe9""ba\x13\x0c\x16\x16\xe9""D\xb1\x11\x8b`\x9b\"`\xa7\x8d),\x85\xd4\x82\x08""6\xd6\x01\xed\x0c(ZD\x82\xc8\xbah#\xecX\xe4r\xd9\xbb{\xef\x0f""03\xc5""9\xf3\xce\xcc\x99\xf7\xcc\x9c\xc3\xff*\xe3\x9a\xc2\xd7<\xd7\x8b\x8cU1\r\x06\x94""0\x94`\xc3"
"E\xe7V\x1c\t\xebz\xac\t\xe1@Y\xd5\x89[\xef\xf3\x13\xe6""D\x9b>h\n"
"\xe1\xb0\xa8\xc6\x8f\x96\xe0""f\xbak\x18)&\x15\xc2\xbd\xcf\xba""1\xe5\x97\x10\x96\x8a\xc2G\xad\n"
"a6E\x06\xfd\x15~\xaa\x19\xe8\x0c?N\x08\\f\xd0\xcd\x94\xd8\xdb\xf6\xb6v%\xebu&\xe1\xbc\x85.(\xa7\xc0\x9e\xba""7^\xab\xeaw\x97\xa2""3\xb8\xf1\xdb\xa9\x8b\xbc[\xbc\x12\xc2Nj\x7f\x10\xc2rkH9\x93""0\x01\xe6\x8d\xd9\xf5h\xca\x02xW\xdc\xa5""F\xc7\xe8\xfe\xe9"
"\x97\xfc\xb7""4\xa9\x0f\x7fl8\x03u\xdf\x92\x19O\x16\xd5X\xb4\xe7%>\ta\x0b\xac\xd8n#\x9e#5!|\xcfs\x95r\x13z|\xd4k\xdf\xd5\xb3\xf8\xbdO\x88""Ff<~\x8ai\x0e\0\0\0\0IEND\xae""B`\x82";

const char* Options_png = (const char*) temp_binary_data_2;

//================== Selectable.png ==================
static const unsigned char temp_binary_data_3[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,13,0,0,0,13,8,3,0,0,0,69,53,20,78,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,32,99,72,82,77,0,0,122,38,0,0,128,132,0,0,250,0,0,0,128,232,0,0,117,48,0,0,
234,96,0,0,58,152,0,0,23,112,156,186,81,60,0,0,3,0,80,76,84,69,0,0,0,128,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,63,140,212,0,0,1,0,116,82,78,83,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,83,247,7,37,0,0,0,24,116,69,88,116,83,111,102,116,119,97,114,101,0,80,97,105,110,116,46,78,69,84,
32,118,51,46,51,49,55,131,119,134,0,0,0,53,73,68,65,84,24,87,85,205,193,17,0,48,8,2,65,211,127,209,42,2,58,225,183,15,189,200,124,185,139,214,113,180,164,76,73,180,200,213,144,63,113,8,66,23,161,220,108,97,106,72,226,175,2,106,74,123,178,253,4,51,156,
0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* Selectable_png = (const char*) temp_binary_data_3;

//================== View.png ==================
static const unsigned char temp_binary_data_4[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,13,0,0,0,13,8,3,0,0,0,69,53,20,78,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,32,99,72,82,77,0,0,122,38,0,0,128,132,0,0,250,0,0,0,128,232,0,0,117,48,0,0,
234,96,0,0,58,152,0,0,23,112,156,186,81,60,0,0,3,0,80,76,84,69,0,0,0,128,128,0,128,128,128,192,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,111,201,17,0,0,1,0,116,82,78,83,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,83,247,7,37,0,0,0,24,116,69,88,116,83,111,102,116,119,97,114,101,0,80,97,105,110,116,
46,78,69,84,32,118,51,46,51,49,55,131,119,134,0,0,0,65,73,68,65,84,24,87,141,140,81,10,192,48,8,67,147,231,253,207,236,98,91,232,96,63,139,136,121,6,85,191,165,47,153,212,172,39,67,75,139,44,89,128,131,106,21,19,82,21,31,170,196,242,166,206,52,164,207,
151,28,17,191,233,234,63,61,67,16,109,223,115,226,235,97,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* View_png = (const char*) temp_binary_data_4;

//================== Translation_fr.txt ==================
static const unsigned char temp_binary_data_5[] =
"language: French\r\n"
"countries: fr be mc ch lu\r\n"
" \r\n"
"\"Name\" = \"Nom\"\r\n"
"\"Value\" = \"Valeur\"\r\n"
"\"Quit\" = \"Quitter\"\r\n"
"\"About IGNMap\" = \"A propos de IGNMap\"\r\n"
"\"Selection\" = \"S\xc3\xa9lection\"\r\n"
"\"File\" = \"Fichier\"\r\n"
"\"Edit\" = \"Edition\"\r\n"
"\"Pen\" = \"Stylo\"\r\n"
"\"Brush\" = \"Pinceau\"\r\n"
"\"Width\" = \"Epaisseur\"\r\n"
"\"Opacity\" = \"Opacit\xc3\xa9\"\r\n"
"\"Visibility\" = \"Visibilit\xc3\xa9\"\r\n"
"\" is already opened\" = \" est d\xc3\xa9j\xc3\xa0 ouvert\"\r\n"
"\" : this file cannot be opened\" = \" : ce fichier ne peut pas \xc3\xaatre ouvert\"\r\n"
"\"Add WMTS / TMS server\" : \"Ajout d'une couche WMTS / TMS\"\r\n"
"\"Geoportail (France)\" : \"G\xc3\xa9oportail (France)\"\r\n"
"\"Translate\" : \"Traduire\"\r\n"
"\"Load a translation file\" : \"Chargement d'un fichier de traduction\"\r\n"
"\"Translate\" = \"Traduire\"\r\n"
"\"Layers\" = \"Couches\"\r\n"
"\"Add OSM data\" = \"Ajout d'une couche OSM\"\r\n"
"\"View\" = \"Afficher\"\r\n"
"\"View Side Panel\" = \"Afficher le panneau d'information\"\r\n"
"\"View Feature Viewer\" = \"Afficher la fiche objet\"\r\n"
"\"DTM\" = \"MNT\"\r\n"
"\"Altitude\"=\"Altitude\"\r\n"
"\"Standard shading\"=\"Estompage classique\"\r\n"
"\"Light shading\"=\"Estompage l\xc3\xa9ger\"\r\n"
"\"Free shading\"=\"Estompage libre\"\r\n"
"\"Slope\"=\"Pente\"\r\n"
"\"Colours\"=\"Aplats de couleurs\"\r\n"
"\"Colours + Shading\"=\"Aplats + Estompage\"\r\n"
"\"Contour lines\"=\"Isohypses\"\r\n"
"\"WMTS Server\"=\"Serveur WMTS\"\r\n"
"\"Cancel\"=\"Annuler\"\r\n"
"\"OK\"=\"OK\"\r\n"
"\"Add a WMTS server\"=\"Ajouter un flux WMTS\"\r\n"
"\"URL of the WMTS server\"=\"URL du flux WMTS\"\r\n"
"\"Scale\"=\"Echelle\"\r\n"
"\"Import a vector file\"=\"Import d'un fichier vectoriel\"\r\n"
"\"Import a vector folder\"=\"Import d'un r\xc3\xa9pertoire de fichiers vectoriels\"\r\n"
"\"Import a image file\"=\"Import d'un fichier image\"\r\n"
"\"Import a image folder\"=\"Import d'un r\xc3\xa9pertoire d'images\"\r\n"
"\"Import a DTM file\"=\"Import d'un fichier MNT\"\r\n"
"\"Import a DTM folder\"=\"Import d'un r\xc3\xa9pertoire de MNT\"\r\n"
"\"Import a LAS/LAZ file\"=\"Import d'un fichier LAS/LAZ\"\r\n"
"\"Import a LAS/LAZ folder\"=\"Import d'un r\xc3\xa9pertoire de LAS/LAZ\"\r\n"
"\"Panels\"=\"Panneaux\"\r\n"
"\"Vector Layers\"=\"Couches vectorielles\"\r\n"
"\"RGB channels :\"=\"Canaux RVB :\"\r\n"
"\"Double-click for viewing\"=\"Double-cliquer pour voir\"\r\n"
"\"Double-click for copying\"=\"Double-cliquer pour copier\"\r\n"
"\"Layer Center\"=\"Centre de la couche\"\r\n"
"\"Layer Frame\"=\"Cadre de la couche\"\r\n"
"\"Remove\"=\"Supprimer\"";

const char* Translation_fr_txt = (const char*) temp_binary_data_5;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes);
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x04402b01:  numBytes = 1281; return NoSelectable_png;
        case 0x03333e90:  numBytes = 1295; return NoView_png;
        case 0x4f1c90e8:  numBytes = 4937; return Options_png;
        case 0x53ab7ee0:  numBytes = 1267; return Selectable_png;
        case 0x4b26a5af:  numBytes = 1279; return View_png;
        case 0x6c6745eb:  numBytes = 2072; return Translation_fr_txt;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "NoSelectable_png",
    "NoView_png",
    "Options_png",
    "Selectable_png",
    "View_png",
    "Translation_fr_txt"
};

const char* originalFilenames[] =
{
    "NoSelectable.png",
    "NoView.png",
    "Options.png",
    "Selectable.png",
    "View.png",
    "Translation_fr.txt"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8);
const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
        if (strcmp (namedResourceList[i], resourceNameUTF8) == 0)
            return originalFilenames[i];

    return nullptr;
}

}
